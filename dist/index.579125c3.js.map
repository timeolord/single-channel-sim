{"mappings":"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","sources":["src/index.js"],"sourcesContent":["//import { Chart } from 'chart.js/auto'\r\n//Random number generation with the same behaviour as the original paper\r\nclass Random {\r\n  constructor(){\r\n    this.jSeed = 536870911\r\n    this.kSeed = 8388607\r\n  }\r\n  random(){\r\n    var k = Math.floor(this.jSeed / 53668)\r\n    this.jSeed = 40014 * (this.jSeed - k*53668) - k * 12211\r\n\r\n    if(this.jSeed < 0){\r\n      this.jSeed += 2147483563;\r\n    }\r\n\r\n    k = Math.floor(this.kSeed / 52774);\r\n\t  this.kSeed = 40692 * (this.kSeed - k*52774) - k * 3791;\r\n\r\n    if(this.kSeed < 0){\r\n      this.kSeed += 2147483399;\r\n    }\r\n\r\n    var Z = this.jSeed - this.kSeed;\r\n\r\n\t  if(Z < 1){\r\n      Z += 2147483562;\r\n    } \r\n\r\n\t  return parseFloat(4.65661305739177e-10 * parseFloat(Z));\r\n  }\r\n}\r\nr = new Random()\r\n\r\nfunction range(start, end){\r\n  const length = end - start;\r\n  return Array.from({ length }, (_, i) => start + i);\r\n}\r\nfunction drop(array, n){\r\n  if (n == 0){\r\n    return array\r\n  }\r\n  if (n > 0) {\r\n    for (let i = 0; i < n; i++){\r\n      array.shift()\r\n    }\r\n    return array\r\n  }\r\n  else {\r\n    for (let i = 0; i > n; i--){\r\n      array.pop()\r\n    }\r\n    return array\r\n  }\r\n}\r\nfunction windows(a, sz, skip) {\r\n  return a.map((_, i, ary) => ary.slice(i, i + sz)).slice(0, -sz + skip);\r\n}\r\nfunction dot(a, b){\r\n  let t1 = a.map((x, i) => a[i] * b[i])\r\n  let t2 = t1.reduce((a, b) => a + b)\r\n  return t2;\r\n}\r\nfunction singletrace(qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, timeStep){\r\n  let timeIncrement = 0\r\n  let time = 0\r\n  let state = initalState\r\n  let minimumPosition = \"\"\r\n  let decayTimes = new Object()\r\n  let current = new Array(Math.floor(maxTime / timeStep))\r\n\tcurrent[timeIncrement] = -u*conductivityList[state]; /* current at t = 0 */\r\n\r\n  function singletrace_aux(timeLimit, q) {\r\n    while (time < timeLimit) {\r\n      /* calculate decay times into prospective new states */\r\n      for (let newState in conductivityList) {\r\n        if (q[state][newState] > 0.)\r\n          decayTimes[newState] = -Math.log(r.random()) / q[state][newState];\r\n        else\r\n          /* no decay in this direction */\r\n          decayTimes[newState] = maxTime + 1.;\r\n          /* tmax + 1. is infinity() for this purpose */\r\n      }\r\n      /* find minimum decay time and resp. new state */\r\n      let minimumTime = maxTime + 2;\r\n      for (let newState in conductivityList) {\r\n        if (decayTimes[newState] < minimumTime) {\r\n          minimumTime = decayTimes[newState];\r\n          minimumPosition = newState;\r\n        }\r\n      }\r\n      /* check if transmitter pulse duration is exceeded */\r\n      if (time + minimumTime < timeLimit) {\r\n        /* write to current[] and update state and time */\r\n        for (let timeIncrementSojourn = timeIncrement + 1;\r\n             timeIncrementSojourn <= Math.floor((time + minimumTime) / timeStep);\r\n             timeIncrementSojourn++)\r\n          current[timeIncrementSojourn] = -u*conductivityList[state];\r\n        state = minimumPosition; /* new state */\r\n        time = time + minimumTime; /* new time */\r\n        timeIncrement = Math.floor(time / timeStep);\r\n      }\r\n      else {\r\n        /* clip sojourn at the end of the transmitter pulse */\r\n        /* write to current[] and update time */\r\n        for (let timeIncrementSojourn = timeIncrement + 1;\r\n             timeIncrementSojourn <= Math.floor(timeLimit / timeStep);\r\n             timeIncrementSojourn++)\r\n          current[timeIncrementSojourn] = -u*conductivityList[state];\r\n        /* keep old state */\r\n        time = timeLimit; /* new time */\r\n        timeIncrement = Math.floor(time / timeStep);\r\n      }\r\n    } /* while */\r\n  }\r\n\r\n\t/* transmitter pulse */\r\n\tsingletrace_aux(duration, qflatpulse)\r\n\r\n\t/* relaxation after transmitter pulse */\r\n  singletrace_aux(maxTime, qflatpause)\r\n\r\n  return current\r\n}\r\nfunction tracetable(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep){\r\n  return range(0, n).map(() => singletrace(qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, timeStep))\r\n}\r\nfunction meancurrent(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep){\r\n  function addvector(a, b){\r\n    return a.map((x, i) => x + b[i])\r\n  }\r\n  let tracetableResult = tracetable(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep)\r\n  return tracetableResult.reduce((a, b) => addvector(a, b)).map(x => x / n)\r\n}\r\nfunction filtertest(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, samplingFrequency, cutoffFrequency){\r\n  let timeStep = 1 / samplingFrequency\r\n  let sigma = 0.1325 / (cutoffFrequency / samplingFrequency);\r\n  let filterN = Math.round(4 * sigma)\r\n  let filterA = range(-filterN, filterN + 1).map(x => Math.exp(-x*x / (2*sigma*sigma)))\r\n  filterA = filterA.map(x => x / filterA.reduce((a, b) => a + b))\r\n  let sampledCurrent = new Array(filterN).fill(0).concat(\r\n    meancurrent(qflatpulse, qflatpause, conductivityList, initalState, duration, ensembleSize, u, maxTime + (filterN * timeStep), timeStep).map(x => x * ensembleSize))\r\n  let unfilteredCurrent = drop(drop([...sampledCurrent], filterN), -filterN)\r\n  let filteredCurrent = windows([...sampledCurrent], 1 + (2 * filterN), 1).map(x => dot(x, filterA))\r\n  return {\"unfilteredCurrent\": unfilteredCurrent, \"filteredCurrent\": filteredCurrent, \"timeStep\": timeStep}\r\n}\r\nfunction peakEPSCs(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, samplingFrequency, cutoffFrequency){\r\n  let peaks = range(0, n).map(() => filtertest(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, samplingFrequency, cutoffFrequency).filteredCurrent.reduce((a, b) => Math.min(a, b)))\r\n  let peakFrequencies = new Array(Math.round(-Math.min(...peaks) * 1.5)).fill(0)\r\n  peaks.forEach(x => peakFrequencies[-Math.round(x)]++)\r\n  return peakFrequencies.map(x => x / peakFrequencies.reduce((a, b) => a + b))\r\n}\r\nfunction qMatrix(height) {\r\n  return {\r\n    \"C1\": {\"C1\": -100000.0*height, \"C2\": 100000.0*height, \"C3\": 0, \"O\": 0},\r\n    \"C2\": {\"C1\": 50, \"C2\": -64, \"C3\": 4, \"O\": 10},\r\n    \"C3\": {\"C1\": 0, \"C2\": 0.02, \"C3\": -0.02, \"O\": 0},\r\n    \"O\": {\"C1\": 0, \"C2\": 0.5, \"C3\": 0.0, \"O\": -0.5},\r\n  }\r\n}\r\n\r\nfunction drawTrace(data, elementID, timeStep, title, metadata){\r\n  return new Chart(\r\n    document.getElementById(elementID),\r\n    {\r\n      type: 'line',\r\n      data: {\r\n        labels: [...Array(data.length).keys()].map(x => (x * timeStep).toFixed(1)),\r\n        datasets: [\r\n          {\r\n            label: \"Current\",\r\n            data: data,\r\n            pointRadius: 0\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: title\r\n            },\r\n            legend: {\r\n                display: false\r\n            },\r\n            subtitle: {\r\n              display: true,\r\n              text: `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`,\r\n              padding: {\r\n                bottom: 20\r\n              }\r\n          },\r\n        },\r\n        scales: {\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Current (pA)'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Time (ms)'\r\n            }\r\n          },\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\nfunction updateTrace(chart, data, timeStep, metadata){\r\n  chart.data.datasets[0].data = data\r\n  chart.data.labels = [...Array(data.length).keys()].map(x => (x * timeStep).toFixed(1))\r\n  chart.options.plugins.subtitle.text = `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`\r\n  chart.update()\r\n}\r\nfunction drawHistrogram(data, elementID, metadata){\r\n  return new Chart(\r\n    document.getElementById(elementID),\r\n    {\r\n      type: 'bar',\r\n      data: {\r\n        labels: [...Array(data.length).keys()],\r\n        datasets: [\r\n          {\r\n            label: `Peak EPSC Frequency`,\r\n            data: data\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: `Peak EPSC Amplitiude Distribution`\r\n            },\r\n            subtitle: {\r\n                display: true,\r\n                text: `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`,\r\n                padding: {\r\n                  bottom: 20\r\n                }\r\n            },\r\n            legend: {\r\n              display: false\r\n            }\r\n        },\r\n        scales: {\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Frequency'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Current (pA)'\r\n            }\r\n          },\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\nfunction updateHistogram(chart, data, metadata){\r\n  chart.data.datasets[0].data = data\r\n  chart.data.labels = [...Array(data.length).keys()]\r\n  chart.options.plugins.subtitle.text = `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`\r\n  chart.update()\r\n}\r\nfunction defaultMetadata(){\r\n  return {\r\n    n: 200,\r\n    ensembleSize: 100,\r\n    samplingFrequency: 40,\r\n    cutoffFrequency: 3,\r\n    duration: 1,\r\n    u: 0.07,\r\n    maxTime: 10,\r\n    height: 0.001,\r\n    qMatrix: qMatrix,\r\n    clist: {\r\n      \"C1\": 0,\r\n      \"C2\": 0,\r\n      \"C3\": 0,\r\n      \"O\": 8\r\n    },\r\n    initalState: \"C1\",\r\n    timeStep: 0.02\r\n  }\r\n}\r\nfunction defaultWatch(){\r\n  return {\r\n    n: \"updateGraphs\",\r\n    ensembleSize: \"updateGraphs\",\r\n    samplingFrequency:  \"updateGraphs\",\r\n    cutoffFrequency: \"updateGraphs\",\r\n    duration: \"updateGraphs\",\r\n    u: \"updateGraphs\",\r\n    maxTime: \"updateGraphs\",\r\n    height: \"updateGraphs\", //TODO\r\n    clist: \"updateGraphs\",\r\n    initalState: \"updateGraphs\",\r\n    timeStep: \"updateGraphs\"\r\n  }\r\n}\r\nfunction defaultMethods(){\r\n  return {\r\n    drawGraphs() {\r\n      let data = peakEPSCs(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      window.histogram = drawHistrogram(data, \"histogram\", this)\r\n\r\n      data = singletrace(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.timeStep)\r\n      window.singlegraph = drawTrace(data, \"singletrace\", this.timeStep, \"Single Trace\", this)\r\n\r\n      data = meancurrent(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.timeStep)\r\n      window.meangraph = drawTrace(data, \"meancurrent\", this.timeStep, \"Mean Current\", this)\r\n\r\n      data = filtertest(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      window.filtered = drawTrace(data.filteredCurrent, \"filtered\", data.timeStep, \"Filtered Mean Current\", this)\r\n      window.unfiltered = drawTrace(data.unfilteredCurrent, \"unfiltered\", data.timeStep, \"Unfiltered Mean Current\", this)\r\n    },\r\n    updateGraphs() {\r\n      let data = peakEPSCs(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      updateHistogram(histogram, data, this)\r\n\r\n      data = singletrace(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.timeStep)\r\n      updateTrace(singlegraph, data, this.timeStep, this)\r\n\r\n      data = meancurrent(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.timeStep)\r\n      updateTrace(meangraph, data, this.timeStep, this)\r\n\r\n      data = filtertest(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      updateTrace(filtered, data.filteredCurrent, data.timeStep, this)\r\n      updateTrace(unfiltered, data.unfilteredCurrent, data.timeStep, this)\r\n    }\r\n  }\r\n}\r\nfunction setSliderCallbacks(metadata){\r\n  let sliders = document.querySelectorAll(\"input[type='range']\")\r\n  sliders.forEach((slider) => {\r\n    slider.addEventListener(\"input\", (event) => {\r\n      let id = event.target.id\r\n      let value = event.target.value\r\n      metadata[id] = value\r\n    })\r\n  })\r\n}\r\n\r\n//(async function() {\r\n//  slider = document.getElementById(\"nRange\");\r\n//  slider.oninput = function() {\r\n//    output.innerHTML = this.value;\r\n//  }\r\n//})()\r\n\r\n//(async function() {\r\n//  let height = 0.001;\r\n//  let duration = 1;\r\n//  let u = 0.07;\r\n//  let tmax = 10;\r\n//  let tstep = 0.2;\r\n//  \r\n//  let qflatpulse = qMatrix(height)\r\n//  let qPause = qMatrix(0)\r\n//  let clist = {\r\n//    \"C1\": 0,\r\n//    \"C2\": 0,\r\n//    \"C3\": 0,\r\n//    \"O\": 8\r\n//  }\r\n//  let initalState = \"C1\";\r\n//  let n = 200\r\n//  let s = meancurrent(qflatpulse, qPause, clist, initalState, duration, n, u, tmax, tstep)\r\n//  let ensembleSize = 100\r\n//  let samplingFrequency = 40\r\n//  let cutoffFrequency = 3\r\n//\r\n//  let filtertestData = filtertest(ensembleSize, qflatpulse, qPause, clist, initalState, duration, u, tmax, samplingFrequency, cutoffFrequency)\r\n//  drawTrace(filtertestData.filteredCurrent, \"filtered\", filtertestData.timeStep, \"Filtered Mean Currents\")\r\n//  drawTrace(filtertestData.unfilteredCurrent, \"unfiltered\", filtertestData.timeStep, \"Unfiltered Mean Currents\")\r\n//  let singletraceData = singletrace(qflatpulse, qPause, clist, initalState, duration, u, tmax, tstep)\r\n//  drawTrace(singletraceData, \"singletrace\", tstep, \"Single Trace Current\")\r\n//  let meancurrentData = meancurrent(qflatpulse, qPause, clist, initalState, duration, n, u, tmax, tstep)\r\n//  drawTrace(meancurrentData, \"meancurrent\", tstep, \"Mean Current\")\r\n//})()"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}