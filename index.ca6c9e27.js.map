{"mappings":"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","sources":["src/index.js"],"sourcesContent":["//import { Chart } from 'chart.js/auto'\r\n//Random number generation with the same behaviour as the original paper\r\nclass Random {\r\n  constructor(){\r\n    this.jSeed = 536870911\r\n    this.kSeed = 8388607\r\n  }\r\n  random(){\r\n    var k = Math.floor(this.jSeed / 53668)\r\n    this.jSeed = 40014 * (this.jSeed - k*53668) - k * 12211\r\n\r\n    if(this.jSeed < 0){\r\n      this.jSeed += 2147483563;\r\n    }\r\n\r\n    k = Math.floor(this.kSeed / 52774);\r\n\t  this.kSeed = 40692 * (this.kSeed - k*52774) - k * 3791;\r\n\r\n    if(this.kSeed < 0){\r\n      this.kSeed += 2147483399;\r\n    }\r\n\r\n    var Z = this.jSeed - this.kSeed;\r\n\r\n\t  if(Z < 1){\r\n      Z += 2147483562;\r\n    } \r\n\r\n\t  return parseFloat(4.65661305739177e-10 * parseFloat(Z));\r\n  }\r\n}\r\nr = new Random()\r\n\r\nfunction range(start, end){\r\n  const length = end - start;\r\n  return Array.from({ length }, (_, i) => start + i);\r\n}\r\nfunction drop(array, n){\r\n  if (n == 0){\r\n    return array\r\n  }\r\n  if (n > 0) {\r\n    for (let i = 0; i < n; i++){\r\n      array.shift()\r\n    }\r\n    return array\r\n  }\r\n  else {\r\n    for (let i = 0; i > n; i--){\r\n      array.pop()\r\n    }\r\n    return array\r\n  }\r\n}\r\nfunction windows(a, sz, skip) {\r\n  return a.map((_, i, ary) => ary.slice(i, i + sz)).slice(0, -sz + skip);\r\n}\r\nfunction dot(a, b){\r\n  let t1 = a.map((x, i) => a[i] * b[i])\r\n  let t2 = t1.reduce((a, b) => a + b)\r\n  return t2;\r\n}\r\nfunction singletrace(qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, timeStep){\r\n  let timeIncrement = 0\r\n  let time = 0\r\n  let state = initalState\r\n  let minimumPosition = \"\"\r\n  let decayTimes = new Object()\r\n  let current = new Array(Math.floor(maxTime / timeStep))\r\n\tcurrent[timeIncrement] = -u*conductivityList[state]; /* current at t = 0 */\r\n\r\n  function singletrace_aux(timeLimit, q) {\r\n    while (time < timeLimit) {\r\n      /* calculate decay times into prospective new states */\r\n      for (let newState in conductivityList) {\r\n        if (q[state][newState] > 0.)\r\n          decayTimes[newState] = -Math.log(r.random()) / q[state][newState];\r\n        else\r\n          /* no decay in this direction */\r\n          decayTimes[newState] = maxTime + 1.;\r\n          /* tmax + 1. is infinity() for this purpose */\r\n      }\r\n      /* find minimum decay time and resp. new state */\r\n      let minimumTime = maxTime + 2;\r\n      for (let newState in conductivityList) {\r\n        if (decayTimes[newState] < minimumTime) {\r\n          minimumTime = decayTimes[newState];\r\n          minimumPosition = newState;\r\n        }\r\n      }\r\n      /* check if transmitter pulse duration is exceeded */\r\n      if (time + minimumTime < timeLimit) {\r\n        /* write to current[] and update state and time */\r\n        for (let timeIncrementSojourn = timeIncrement + 1;\r\n             timeIncrementSojourn <= Math.floor((time + minimumTime) / timeStep);\r\n             timeIncrementSojourn++)\r\n          current[timeIncrementSojourn] = -u*conductivityList[state];\r\n        state = minimumPosition; /* new state */\r\n        time = time + minimumTime; /* new time */\r\n        timeIncrement = Math.floor(time / timeStep);\r\n      }\r\n      else {\r\n        /* clip sojourn at the end of the transmitter pulse */\r\n        /* write to current[] and update time */\r\n        for (let timeIncrementSojourn = timeIncrement + 1;\r\n             timeIncrementSojourn <= Math.floor(timeLimit / timeStep);\r\n             timeIncrementSojourn++)\r\n          current[timeIncrementSojourn] = -u*conductivityList[state];\r\n        /* keep old state */\r\n        time = timeLimit; /* new time */\r\n        timeIncrement = Math.floor(time / timeStep);\r\n      }\r\n    } /* while */\r\n  }\r\n\r\n\t/* transmitter pulse */\r\n\tsingletrace_aux(duration, qflatpulse)\r\n\r\n\t/* relaxation after transmitter pulse */\r\n  singletrace_aux(maxTime, qflatpause)\r\n\r\n  return current\r\n}\r\nfunction tracetable(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep){\r\n  return range(0, n).map(() => singletrace(qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, timeStep))\r\n}\r\nfunction meancurrent(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep){\r\n  function addvector(a, b){\r\n    return a.map((x, i) => x + b[i])\r\n  }\r\n  let tracetableResult = tracetable(qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, timeStep)\r\n  return tracetableResult.reduce((a, b) => addvector(a, b)).map(x => x / n)\r\n}\r\nfunction filtertest(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, samplingFrequency, cutoffFrequency){\r\n  let timeStep = 1 / samplingFrequency\r\n  let sigma = 0.1325 / (cutoffFrequency / samplingFrequency);\r\n  let filterN = Math.round(4 * sigma)\r\n  let filterA = range(-filterN, filterN + 1).map(x => Math.exp(-x*x / (2*sigma*sigma)))\r\n  filterA = filterA.map(x => x / filterA.reduce((a, b) => a + b))\r\n  let sampledCurrent = new Array(filterN).fill(0).concat(\r\n    meancurrent(qflatpulse, qflatpause, conductivityList, initalState, duration, ensembleSize, u, maxTime + (filterN * timeStep), timeStep).map(x => x * ensembleSize))\r\n  let unfilteredCurrent = drop(drop([...sampledCurrent], filterN), -filterN)\r\n  let filteredCurrent = windows([...sampledCurrent], 1 + (2 * filterN), 1).map(x => dot(x, filterA))\r\n  return {\"unfilteredCurrent\": unfilteredCurrent, \"filteredCurrent\": filteredCurrent, \"timeStep\": timeStep}\r\n}\r\nfunction peakEPSCs(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, n, u, maxTime, samplingFrequency, cutoffFrequency){\r\n  let peaks = range(0, n).map(() => filtertest(ensembleSize, qflatpulse, qflatpause, conductivityList, initalState, duration, u, maxTime, samplingFrequency, cutoffFrequency).filteredCurrent.reduce((a, b) => Math.min(a, b)))\r\n  let peakFrequencies = new Array(Math.round(-Math.min(...peaks) * 1.5)).fill(0)\r\n  peaks.forEach(x => peakFrequencies[-Math.round(x)]++)\r\n  return peakFrequencies.map(x => x / peakFrequencies.reduce((a, b) => a + b))\r\n}\r\nfunction qMatrix(height) {\r\n  return {\r\n    \"C1\": {\"C1\": -100000.0*height, \"C2\": 100000.0*height, \"C3\": 0, \"O\": 0},\r\n    \"C2\": {\"C1\": 50, \"C2\": -64, \"C3\": 4, \"O\": 10},\r\n    \"C3\": {\"C1\": 0, \"C2\": 0.02, \"C3\": -0.02, \"O\": 0},\r\n    \"O\": {\"C1\": 0, \"C2\": 0.5, \"C3\": 0.0, \"O\": -0.5},\r\n  }\r\n}\r\n\r\nfunction drawTrace(data, elementID, timeStep, title, metadata){\r\n  return new Chart(\r\n    document.getElementById(elementID),\r\n    {\r\n      type: 'line',\r\n      data: {\r\n        labels: [...Array(data.length).keys()].map(x => (x * timeStep).toFixed(1)),\r\n        datasets: [\r\n          {\r\n            label: \"Current\",\r\n            data: data,\r\n            pointRadius: 0\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: title\r\n            },\r\n            legend: {\r\n                display: false\r\n            },\r\n            subtitle: {\r\n              display: true,\r\n              text: `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`,\r\n              padding: {\r\n                bottom: 20\r\n              }\r\n          },\r\n        },\r\n        scales: {\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Current (pA)'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Time (ms)'\r\n            }\r\n          },\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\nfunction updateTrace(chart, data, timeStep, metadata){\r\n  chart.data.datasets[0].data = data\r\n  chart.data.labels = [...Array(data.length).keys()].map(x => (x * timeStep).toFixed(1))\r\n  chart.options.plugins.subtitle.text = `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`\r\n  chart.update()\r\n}\r\nfunction drawHistrogram(data, elementID, metadata){\r\n  return new Chart(\r\n    document.getElementById(elementID),\r\n    {\r\n      type: 'bar',\r\n      data: {\r\n        labels: [...Array(data.length).keys()],\r\n        datasets: [\r\n          {\r\n            label: `Peak EPSC Frequency`,\r\n            data: data\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: `Peak EPSC Amplitiude Distribution`\r\n            },\r\n            subtitle: {\r\n                display: true,\r\n                text: `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`,\r\n                padding: {\r\n                  bottom: 20\r\n                }\r\n            },\r\n            legend: {\r\n              display: false\r\n            }\r\n        },\r\n        scales: {\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Frequency'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Current (pA)'\r\n            }\r\n          },\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\nfunction updateHistogram(chart, data, metadata){\r\n  chart.data.datasets[0].data = data\r\n  chart.data.labels = [...Array(data.length).keys()]\r\n  chart.options.plugins.subtitle.text = `emsemble size = ${metadata.ensembleSize}, n = ${metadata.n}, duration = ${metadata.duration} ms, u = ${metadata.u}, max time = ${metadata.maxTime} ms, sampling frequency = ${metadata.samplingFrequency} kHz, cutoff frequency = ${metadata.cutoffFrequency} kHz`\r\n  chart.update()\r\n}\r\nfunction defaultMetadata(){\r\n  return {\r\n    n: 200,\r\n    ensembleSize: 100,\r\n    samplingFrequency: 40,\r\n    cutoffFrequency: 3,\r\n    duration: 1,\r\n    u: 0.07,\r\n    maxTime: 10,\r\n    height: 0.001,\r\n    qMatrix: qMatrix,\r\n    clist: {\r\n      \"C1\": 0,\r\n      \"C2\": 0,\r\n      \"C3\": 0,\r\n      \"O\": 8\r\n    },\r\n    initalState: \"C1\",\r\n    timeStep: 0.02\r\n  }\r\n}\r\nfunction defaultWatch(){\r\n  return {\r\n    n: \"updateGraphs\",\r\n    ensembleSize: \"updateGraphs\",\r\n    samplingFrequency:  \"updateGraphs\",\r\n    cutoffFrequency: \"updateGraphs\",\r\n    duration: \"updateGraphs\",\r\n    u: \"updateGraphs\",\r\n    maxTime: \"updateGraphs\",\r\n    height: \"updateGraphs\", //TODO\r\n    clist: \"updateGraphs\",\r\n    initalState: \"updateGraphs\",\r\n    timeStep: \"updateGraphs\"\r\n  }\r\n}\r\nfunction defaultMethods(){\r\n  return {\r\n    drawGraphs() {\r\n      let data = peakEPSCs(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      window.histogram = drawHistrogram(data, \"histogram\", this)\r\n\r\n      data = singletrace(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.timeStep)\r\n      window.singlegraph = drawTrace(data, \"singletrace\", this.timeStep, \"Single Trace\", this)\r\n\r\n      data = meancurrent(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.timeStep)\r\n      window.meangraph = drawTrace(data, \"meancurrent\", this.timeStep, \"Mean Current\", this)\r\n\r\n      data = filtertest(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      window.filtered = drawTrace(data.filteredCurrent, \"filtered\", data.timeStep, \"Filtered Mean Current\", this)\r\n      window.unfiltered = drawTrace(data.unfilteredCurrent, \"unfiltered\", data.timeStep, \"Unfiltered Mean Current\", this)\r\n    },\r\n    updateGraphs() {\r\n      let data = peakEPSCs(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      updateHistogram(histogram, data, this)\r\n\r\n      data = singletrace(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.timeStep)\r\n      updateTrace(singlegraph, data, this.timeStep, this)\r\n\r\n      data = meancurrent(this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.n, this.u, this.maxTime, this.timeStep)\r\n      updateTrace(meangraph, data, this.timeStep, this)\r\n\r\n      data = filtertest(this.ensembleSize, this.qflatpulse, this.qPause, this.clist, this.initalState, this.duration, this.u, this.maxTime, this.samplingFrequency, this.cutoffFrequency)\r\n      updateTrace(filtered, data.filteredCurrent, data.timeStep, this)\r\n      updateTrace(unfiltered, data.unfilteredCurrent, data.timeStep, this)\r\n    }\r\n  }\r\n}\r\nfunction setSliderCallbacks(metadata){\r\n  let sliders = document.querySelectorAll(\"input[type='range']\")\r\n  sliders.forEach((slider) => {\r\n    slider.addEventListener(\"input\", (event) => {\r\n      let id = event.target.id\r\n      let value = event.target.value\r\n      metadata[id] = value\r\n    })\r\n  })\r\n}\r\n\r\n//(async function() {\r\n//  slider = document.getElementById(\"nRange\");\r\n//  slider.oninput = function() {\r\n//    output.innerHTML = this.value;\r\n//  }\r\n//})()\r\n\r\n//(async function() {\r\n//  let height = 0.001;\r\n//  let duration = 1;\r\n//  let u = 0.07;\r\n//  let tmax = 10;\r\n//  let tstep = 0.2;\r\n//  \r\n//  let qflatpulse = qMatrix(height)\r\n//  let qPause = qMatrix(0)\r\n//  let clist = {\r\n//    \"C1\": 0,\r\n//    \"C2\": 0,\r\n//    \"C3\": 0,\r\n//    \"O\": 8\r\n//  }\r\n//  let initalState = \"C1\";\r\n//  let n = 200\r\n//  let s = meancurrent(qflatpulse, qPause, clist, initalState, duration, n, u, tmax, tstep)\r\n//  let ensembleSize = 100\r\n//  let samplingFrequency = 40\r\n//  let cutoffFrequency = 3\r\n//\r\n//  let filtertestData = filtertest(ensembleSize, qflatpulse, qPause, clist, initalState, duration, u, tmax, samplingFrequency, cutoffFrequency)\r\n//  drawTrace(filtertestData.filteredCurrent, \"filtered\", filtertestData.timeStep, \"Filtered Mean Currents\")\r\n//  drawTrace(filtertestData.unfilteredCurrent, \"unfiltered\", filtertestData.timeStep, \"Unfiltered Mean Currents\")\r\n//  let singletraceData = singletrace(qflatpulse, qPause, clist, initalState, duration, u, tmax, tstep)\r\n//  drawTrace(singletraceData, \"singletrace\", tstep, \"Single Trace Current\")\r\n//  let meancurrentData = meancurrent(qflatpulse, qPause, clist, initalState, duration, n, u, tmax, tstep)\r\n//  drawTrace(meancurrentData, \"meancurrent\", tstep, \"Mean Current\")\r\n//})()"],"names":["Random","constructor","this","jSeed","kSeed","random","k","Math","floor","Z","parseFloat","range","start","end","length","Array","from","_","i","drop","array","n","shift","i1","pop","windows","a","sz","skip","map","ary","slice","dot","b","x","reduce","singletrace","qflatpulse","qflatpause","conductivityList","initalState","duration","u","maxTime","timeStep","timeIncrement","time","state","minimumPosition","decayTimes","Object","current","singletrace_aux","timeLimit","q","newState","log","r","minimumTime","newState1","timeIncrementSojourn","timeIncrementSojourn1","tracetable","meancurrent","addvector","filtertest","ensembleSize","samplingFrequency","cutoffFrequency","sigma","filterN","round","filterA","exp","sampledCurrent","fill","concat","unfilteredCurrent","filteredCurrent","peakEPSCs","peaks","min","peakFrequencies","forEach","qMatrix","height","C1","C2","C3","O","drawTrace","data","elementID","title","metadata","Chart","document","getElementById","type","labels","keys","toFixed","datasets","label","pointRadius","options","plugins","display","text","legend","subtitle","padding","bottom","scales","y","updateTrace","chart","update","drawHistrogram","responsive","updateHistogram","defaultMetadata","clist","defaultWatch","defaultMethods","drawGraphs","qPause","window","histogram","singlegraph","meangraph","filtered","unfiltered","updateGraphs","setSliderCallbacks","querySelectorAll","slider","addEventListener","event","id","target","value"],"version":3,"file":"index.ca6c9e27.js.map"}